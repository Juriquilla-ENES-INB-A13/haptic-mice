/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void btn_fill_click(GButton source, GEvent event) { //_CODE_:btn_fill:452352:
  println("btn_fill - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:btn_fill:452352:

public void btn_runExperiment_click(GButton source, GEvent event) { //_CODE_:btn_runExperiment:703625:
  println("btn_runExperiment - GButton >> GEvent." + event + " @ " + millis());
  if((fld_freq1.getValueI() == 0) || (fld_freq2.getValueI() == 0)){
    println("Not valid");
  }else{
    println(fld_freq1.getValueI());
  }
  
} //_CODE_:btn_runExperiment:703625:

public void btn_open_click(GButton source, GEvent event) { //_CODE_:btn_open:999942:

  launch(sketchPath()+"/data/");
  
} //_CODE_:btn_open:999942:

public void textfield1_change1(GTextField source, GEvent event) { //_CODE_:fld_repeat_experiment:465251:
  println("fld_repeat_experiment - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:fld_repeat_experiment:465251:

public void textfield2_change1(GTextField source, GEvent event) { //_CODE_:fld_wait_time:233054:
  println("fld_wait_time - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:fld_wait_time:233054:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  G4P.setDisplayFont("Arial", G4P.PLAIN, 14);
  G4P.setInputFont("Arial", G4P.PLAIN, 14);
  G4P.setSliderFont("Arial", G4P.PLAIN, 12);
  surface.setTitle("Haptic Mice");
  lblSerialPort = new GLabel(this, 10, 50, 110, 20);
  lblSerialPort.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblSerialPort.setText("Serial port:");
  lblSerialPort.setOpaque(false);
  dl_serialPort = new GDropList(this, 120, 50, 160, 100, 4, 20);
  dl_serialPort.setItems(Serial.list(), 0);
  lbl_experimentName = new GLabel(this, 300, 50, 150, 20);
  lbl_experimentName.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_experimentName.setText("Experiment name");
  lbl_experimentName.setOpaque(false);
  fld_experimentName = new GTextField(this, 450, 50, 160, 20, G4P.SCROLLBARS_NONE);
  fld_experimentName.setOpaque(true);
  lbl_freq1 = new GLabel(this, 110, 100, 130, 20);
  lbl_freq1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_freq1.setText("Frequency 1 (Hz):");
  lbl_freq1.setOpaque(false);
  fld_freq1 = new GTextField(this, 240, 100, 60, 20, G4P.SCROLLBARS_NONE);
  fld_freq1.setOpaque(true);
  lbl_freq2 = new GLabel(this, 110, 160, 130, 20);
  lbl_freq2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_freq2.setText("Frequency 2 (Hz):");
  lbl_freq2.setOpaque(false);
  lbl_time1 = new GLabel(this, 340, 100, 80, 20);
  lbl_time1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_time1.setText("Time 1(s):");
  lbl_time1.setOpaque(false);
  fld_time1 = new GTextField(this, 420, 100, 60, 20, G4P.SCROLLBARS_NONE);
  fld_time1.setOpaque(true);
  lbl_wait = new GLabel(this, 110, 130, 80, 20);
  lbl_wait.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_wait.setText("Wait (s):");
  lbl_wait.setOpaque(false);
  fld_wait = new GTextField(this, 190, 130, 60, 20, G4P.SCROLLBARS_NONE);
  fld_wait.setOpaque(true);
  fld_freq2 = new GTextField(this, 240, 160, 60, 20, G4P.SCROLLBARS_NONE);
  fld_freq2.setOpaque(true);
  lbl_time2 = new GLabel(this, 340, 160, 80, 20);
  lbl_time2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_time2.setText("Time 2 (s):");
  lbl_time2.setOpaque(false);
  fld_time2 = new GTextField(this, 420, 160, 60, 20, G4P.SCROLLBARS_NONE);
  fld_time2.setOpaque(true);
  btn_fill = new GButton(this, 10, 290, 80, 30);
  btn_fill.setText("Fill");
  btn_fill.addEventHandler(this, "btn_fill_click");
  btn_runExperiment = new GButton(this, 460, 290, 140, 30);
  btn_runExperiment.setText("Run Experiment!");
  btn_runExperiment.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  btn_runExperiment.addEventHandler(this, "btn_runExperiment_click");
  btn_open = new GButton(this, 210, 290, 150, 30);
  btn_open.setText("Open Folder...");
  btn_open.addEventHandler(this, "btn_open_click");
  lbl_date = new GLabel(this, 13, 350, 80, 20);
  lbl_date.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_date.setText("20/20/20");
  lbl_date.setOpaque(false);
  lbl_time = new GLabel(this, 94, 350, 80, 20);
  lbl_time.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_time.setText("18:00");
  lbl_time.setOpaque(false);
  lbl_status = new GLabel(this, 494, 349, 100, 20);
  lbl_status.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_status.setText("Stopped!");
  lbl_status.setOpaque(false);
  lbl_os = new GLabel(this, 270, 350, 80, 20);
  lbl_os.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_os.setText(System.getProperty("os.name").toLowerCase());
  lbl_os.setOpaque(false);
  lbl_times_experiments = new GLabel(this, 20, 200, 110, 20);
  lbl_times_experiments.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_times_experiments.setText("Repeat:");
  lbl_times_experiments.setOpaque(false);
  fld_repeat_experiment = new GTextField(this, 130, 200, 60, 20, G4P.SCROLLBARS_NONE);
  fld_repeat_experiment.setOpaque(true);
  fld_repeat_experiment.addEventHandler(this, "textfield1_change1");
  lbl_wait_experiment = new GLabel(this, 230, 200, 250, 20);
  lbl_wait_experiment.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_wait_experiment.setText("Time to wait to repeat experiment:");
  lbl_wait_experiment.setOpaque(false);
  fld_wait_time = new GTextField(this, 480, 200, 60, 20, G4P.SCROLLBARS_NONE);
  fld_wait_time.setOpaque(true);
  fld_wait_time.addEventHandler(this, "textfield2_change1");
}

// Variable declarations 
// autogenerated do not edit
GLabel lblSerialPort; 
GDropList dl_serialPort; 
GLabel lbl_experimentName; 
GTextField fld_experimentName; 
GLabel lbl_freq1; 
GTextField fld_freq1; 
GLabel lbl_freq2; 
GLabel lbl_time1; 
GTextField fld_time1; 
GLabel lbl_wait; 
GTextField fld_wait; 
GTextField fld_freq2; 
GLabel lbl_time2; 
GTextField fld_time2; 
GButton btn_fill; 
GButton btn_runExperiment; 
GButton btn_open; 
GLabel lbl_date; 
GLabel lbl_time; 
GLabel lbl_status; 
GLabel lbl_os; 
GLabel lbl_times_experiments; 
GTextField fld_repeat_experiment; 
GLabel lbl_wait_experiment; 
GTextField fld_wait_time; 
